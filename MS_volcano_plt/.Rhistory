# cat("\n\n Name split: ", paste(name_split, collapse = ", "))
first_part <- name_split[1]
# cat("\n First part: ", first_part)
if (first_part == "loh") {
target_feat <- paste(name_split[1:2], collapse = "_")
}
else if (first_part == "peri") {
if (length(name_split) > 4) {
target_feat <- paste(name_split[1:3], collapse = "_")
} else {
target_feat <- paste(name_split[1:2], collapse = "_")
}
}
else {
target_feat <- first_part
}
cat("\n Target_feat: ", target_feat)
# Read the CSV file
feature_df <- read.csv(feature_file, stringsAsFactors = FALSE, row.names = NULL) %>%
select(-X)
# Join the dfs
feat_joind_df <- feature_df %>%
left_join(
gene_annotations %>%
select(gene_name,seqnames, arm),
by = c("Feature" = "gene_name")
) %>% dplyr::rename(Chr = seqnames, Arm = arm) %>%
drop_na(Chr) %>%
mutate(
chrm_arm = paste0(Chr, Arm),
Target = target_feat
) %>%
select(-c("Chr", "Arm")) %>%
arrange(desc(Gain))
# Save to the complete folder
complete_df_name <- paste0(complete_imp_folder, "/complete_", file_name)
# write.csv(feat_joind_df, complete_df_name, row.names = FALSE, )
# Append to the fully complete df
complete_cancer_type_imp_df <- rbind(complete_cancer_type_imp_df, feat_joind_df)
# Check if the feature is an aneuploidy (ends with q or p)
if (substr(target_feat, nchar(target_feat), nchar(target_feat)) %in% c("q", "p")) {
# cat("\n Target_feat is an aneuploidy: ", target_feat)
# Exclude the target feature from the dataframe
filt_feat_joind_df <- feat_joind_df %>%
filter(
chrm_arm != target_feat
)
# Save the modified dataframe
filtered_df_name <- paste0(filt_imp_folder, "/filt_", file_name)
# write.csv(filt_feat_joind_df, filtered_df_name, row.names = FALSE)
# Append the fully filtered df
filtered_cancer_type_imp_df <- rbind(filtered_cancer_type_imp_df, filt_feat_joind_df)
}
else {
# Append the fully filtered df with the complete df
filtered_cancer_type_imp_df <- rbind(filtered_cancer_type_imp_df, feat_joind_df)
# save the file to the filtered folder
filtered_df_name <- paste0(filt_imp_folder, "/filt_", file_name)
# write.csv(feat_joind_df, filtered_df_name, row.names = FALSE)
}
# remove the variables to save memory
objs_to_rm <- c("feature_df", "feat_joind_df", "filtered_df_name", "complete_df_name", "filt_feat_joind_df")
rm(list = objs_to_rm[objs_to_rm %in% ls()])
}
# stop()
# Set the order for the Target features
response_features_order <- c(
zipup(paste0(1:22, "p"), paste0(1:22, "q")) %>% unlist(),
sort(grep("^peri", unique(complete_cancer_type_imp_df$Target), value = TRUE)),
"ai1", "lst1", "loh_hrd"
)
# Save the full complete cancer type feature importance df
full_complete_cancer_feat_imp_name <- paste0(feat_imp_folder, "/full_complete_", cancer, "_feat_imp.csv")
# write.csv(complete_cancer_type_imp_df, full_complete_cancer_feat_imp_name, row.names = FALSE)
# Save the full filtered cancer type feature importance df
full_filtered_cancer_feat_imp_name <- paste0(feat_imp_folder, "/full_filtered_", cancer, "_feat_imp.csv")
# write.csv(filtered_cancer_type_imp_df, full_filtered_cancer_feat_imp_name, row.names = FALSE)
# Filter the cancer type feat imp df to the top genes only
top_complete_feat_imp_df <- complete_cancer_type_imp_df %>%
group_by(Target) %>%
slice_max(Gain, n = 1) %>%
ungroup()
# Save the top genes feature importance for the unfiltered df
top_complete_feat_imp_name <- paste0(feat_imp_folder, "/top_genes_complete_", cancer, "_feat_imp.csv")
# write.csv(top_complete_feat_imp_df, top_complete_feat_imp_name, row.names = FALSE)
top_filtered_feat_imp_df <- filtered_cancer_type_imp_df %>%
group_by(Target) %>%
slice_max(Gain, n = 1) %>%
ungroup()
# Save the top genes feature importance for the df which is filtered to remove
# the genes that are cis-genes of aneuploidy features
top_filtered_feat_imp_name <- paste0(feat_imp_folder, "/top_genes_filtered_", cancer, "_feat_imp.csv")
# write.csv(top_filtered_feat_imp_df, top_filtered_feat_imp_name, row.names = FALSE)
# combine the top gene files
top_genes_combined <- top_complete_feat_imp_df %>%
select(Target, Feature, Gain, chrm_arm) %>%
dplyr::rename(
Gain_complete = Gain,
chrm_arm_complete = chrm_arm,
Feature_complete = Feature,
Target_complete = Target
) %>%
left_join(
top_filtered_feat_imp_df %>%
select(Target, Feature, Gain, chrm_arm) %>%
dplyr::rename(
Gain_filtered = Gain,
chrm_arm_filtered = chrm_arm,
Feature_filtered = Feature,
Target_filtered = Target
),
by = c("Target_complete" = "Target_filtered")
) %>%
mutate(Target_complete = factor(Target_complete, levels = response_features_order)) %>%
arrange(Target_complete)
# Save the combined top genes feature importance
top_genes_combined_name <- paste0(feat_imp_folder, "/top_genes_combined_", cancer, "_feat_imp.csv")
write.csv(top_genes_combined, top_genes_combined_name, row.names = FALSE)
# Generate the plots
# For the complete data (with all genes)
# Transform the dataframe to a format suitable for heatmap
heatmap_genes_complete <- complete_cancer_type_imp_df %>%
filter(
Feature %in% top_complete_feat_imp_df$Feature,
) %>%
dplyr::select(Feature, Target, Gain) %>%
pivot_wider(names_from = Feature, values_from = Gain) %>%
replace(is.na(.), 0) %>%
pivot_longer(!Target, names_to = "Feature", values_to = "Gain") %>%
mutate(
Target = factor(Target, levels = response_features_order),
Gain = round(Gain, 2)
) %>%
dplyr::arrange(Target, desc(Gain))
# Save the heatmap genes complete dataframe
heatmap_genes_complete_name <- paste0(feat_imp_folder, "/heatmap_genes_complete_", cancer, "_feat_imp_df.csv")
# write.csv(heatmap_genes_complete, heatmap_genes_complete_name, row.names = FALSE)
# Generate the heatmap for the complete data (with all genes)
complete_genomic_heatmap <- ggplot(heatmap_genes_complete, aes(x = Feature, y = Target, fill = Gain)) +
geom_tile(colour = "black", lwd = 0.3) +
scale_fill_gradient2(low = "white", high = "#D21717") +
labs(
title = "",
x = "Gene",
y = "Base Learner",
# subtitle = paste0("Cancer type: ", cancer_type)
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, color = "black", size = 10),
axis.text.y = element_text(angle = 0, hjust = 1, color = "black", size = 11),
plot.title = element_text(hjust = 0.5, size = 16),
plot.subtitle = element_text( size = 12),
legend.title = element_text(size = 15, face = "bold"),
legend.position = "top",
axis.title = element_text(size = 17, face = "bold"),
plot.caption = element_text(size = 11, face = "italic")
)
# Save the complete genomic heatmap
complete_genomic_heatmap_name <- paste0(plot_imp_folder, "/complete_genomic_heatmap_", cancer, ".png")
# ggsave(complete_genomic_heatmap_name, plot = complete_genomic_heatmap, width = 10, height = 8, dpi = 300)
# For the filtered data (with cis-genes of aneuploidy features removed)
# Transform the dataframe to a format suitable for heatmap
heatmap_genes_filtered <- filtered_cancer_type_imp_df %>%
filter(
Feature %in% top_filtered_feat_imp_df$Feature,
) %>%
dplyr::select(Feature, Target, Gain) %>%
pivot_wider(names_from = Feature, values_from = Gain) %>%
replace(is.na(.), 0) %>%
pivot_longer(!Target, names_to = "Feature", values_to = "Gain") %>%
mutate(
Target = factor(Target, levels = response_features_order),
Gain = round(as.numeric(Gain), 2)
) %>%
dplyr::arrange(Target, desc(Gain))
# Save the heatmap genes filtered dataframe
heatmap_genes_filtered_name <- paste0(feat_imp_folder, "/heatmap_genes_filtered_", cancer, "_feat_imp_df.csv")
# write.csv(heatmap_genes_filtered, heatmap_genes_filtered_name, row.names = FALSE)
# Generate the heatmap for the filtered data (with cis-genes of aneuploidy features removed)
filtered_genomic_heatmap <- ggplot(heatmap_genes_filtered, aes(x = Feature, y = Target, fill = Gain)) +
geom_tile(colour = "black", lwd = 0.3) +
scale_fill_gradient2(low = "white", high = "#D21717") +
labs(
title = "",
x = "Gene",
y = "Base Learner",
# subtitle = paste0("Cancer type: ", cancer_type)
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, color = "black", size = 10),
axis.text.y = element_text(angle = 0, hjust = 1, color = "black", size = 11),
plot.title = element_text(hjust = 0.5, size = 16),
plot.subtitle = element_text( size = 12),
legend.title = element_text(size = 15, face = "bold"),
legend.position = "top",
axis.title = element_text(size = 17, face = "bold"),
plot.caption = element_text(size = 11, face = "italic")
)
# Save the filtered genomic heatmap
filtered_genomic_heatmap_name <- paste0(plot_imp_folder, "/filtered_genomic_heatmap_", cancer, ".png")
# ggsave(filtered_genomic_heatmap_name, plot = filtered_genomic_heatmap, width = 10, height = 8, dpi = 300)
}
source("D:/projects/Other/MS_volcano_plt/MS_volcano_plt.R", echo = TRUE)
View(ori_data)
source("D:/projects/Other/MS_volcano_plt/MS_volcano_plt.R", echo = TRUE)
source("D:/projects/Other/MS_volcano_plt/MS_volcano_plt.R", echo = TRUE)
source("D:/projects/Other/MS_volcano_plt/MS_volcano_plt.R", echo = TRUE)
########################################################################################
### IGNORE THIS SECTION
#######################################################################################
#Load the packages
library(ggplot2)
library(EnhancedVolcano)
library(dplyr)
library(tidyr)
library(tools)
library(readr)
# Set the data file name
data_name <- "SummaryData_Volcanoplot__CBX1.T_vs_NLS.T_noRibosome.txt"
# The analysis will look at the fold change of cond_1 over cond_2 (log2(cond_1/cond_2))
cond_1 <- "CBX1"
cond_2 <- "NLS"
# Define the genes of interest
goi_cellulo <- c(
"PRDM2", "ZNF584", "C5orf24", "SP140L", "SCMH1", "CBX4"
)
goi_vitro <- c(
"ZNF384", "TEAD3", "ZNF219", "SMARCAL1", "PRDM10"
)
# Define the controls
cntrls <- c("POGZ", "MPHOSPH8", "ZNF644", "CBX1")
# Define the known interactors
interactors <- c(
"MIS12", "TRIM28", "EHMT2", "SETDB1", "ADNP2", "LBR"
)
# Set the pvalue cutoff
p_val_cutoff <- 0.05
# Set the log 2 fold change cutoff
fc_cutoff <- 2.5
#######################################################################################
### CAN IGNORE THE REST
#######################################################################################
# Set the working directory to the location of this script
this_file <- normalizePath(sys.frame(1)$ofile)
setwd(dirname(this_file))
# Load the data
# Check that the data file exists
if (!file.exists(data_name)) {
stop("Data file does not exist.")
}
# get the extension type
suffix <- tools::file_ext(data_name)
# Load the data based on the file type
if (suffix == "csv"){
ori_data <- read.csv(data_name, header = TRUE)
} else if (suffix == "txt"){
ori_data <- read_delim(data_name, delim = "\t", col_names = TRUE, show_col_types = FALSE)
}
# Configure the data
all_interest <- c(goi, cntrls)
library(ggplot2)
library(EnhancedVolcano)
library(dplyr)
library(tidyr)
library(tools)
library(readr)
# Set the data file name
data_name <- "SummaryData_Volcanoplot__CBX1.T_vs_NLS.T_noRibosome.txt"
# The analysis will look at the fold change of cond_1 over cond_2 (log2(cond_1/cond_2))
cond_1 <- "CBX1"
cond_2 <- "NLS"
# Define the genes of interest
goi_cellulo <- c(
"PRDM2", "ZNF584", "C5orf24", "SP140L", "SCMH1", "CBX4"
)
goi_vitro <- c(
"ZNF384", "TEAD3", "ZNF219", "SMARCAL1", "PRDM10"
)
# Define the controls
cntrls <- c("POGZ", "MPHOSPH8", "ZNF644", "CBX1")
# Define the known interactors
interactors <- c(
"MIS12", "TRIM28", "EHMT2", "SETDB1", "ADNP2", "LBR"
)
# Set the pvalue cutoff
p_val_cutoff <- 0.05
# Set the log 2 fold change cutoff
fc_cutoff <- 2.5
#######################################################################################
### CAN IGNORE THE REST
#######################################################################################
# Set the working directory to the location of this script
this_file <- normalizePath(sys.frame(1)$ofile)
#######################################################################################
### CAN IGNORE THE REST
#######################################################################################
# Set the working directory to the location of this script
this_file <- normalizePath(sys.frame(1)$ofile)
#######################################################################################
### CAN IGNORE THE REST
#######################################################################################
# Set the working directory to the location of this script
this_file <- normalizePath(sys.frame(1)$file)
setwd(dirname(this_file))
# Load the data
# Check that the data file exists
if (!file.exists(data_name)) {
stop("Data file does not exist.")
}
# get the extension type
suffix <- tools::file_ext(data_name)
# Load the data based on the file type
if (suffix == "csv"){
ori_data <- read.csv(data_name, header = TRUE)
} else if (suffix == "txt"){
ori_data <- read_delim(data_name, delim = "\t", col_names = TRUE, show_col_types = FALSE)
}
# Configure the data
all_interest <- c(goi, cntrls)
# Configure the data
all_interest <- c(goi_cellulo, goi_vitro, interactors, cntrls)
# Set the columns to keep
keep_columns <- c(
c("Gene.names", "p_value", "log2FC"),
names(select(ori_data, starts_with(cond_1))),
names(select(ori_data, starts_with(cond_2)))
)
# Reduce data based on the cols to keep
data <- ori_data %>%
mutate(p_value = 10^(-ori_data$`pvalue.-log10`)) %>%
rowwise() %>%
mutate(
log2FC = FoldChange
)%>%
ungroup() %>%
select(
all_of(keep_columns)
)
# Set all columns but gene names to numeric
data[2:ncol(data)] <- lapply(data[2:ncol(data)], function(x) as.numeric(as.character(x)))
# order the data
gene_flags <- data$Gene.names %in% goi_cellulo |
data$Gene.names %in% cntrls |
data$Gene.names %in% interactors |
data$Gene.names %in% goi_vitro
data <- rbind(
data[!(gene_flags), ],
data[gene_flags, ]
)
data <- rbind(
data[!(gene_flags), ],
data[gene_flags, ]
)
# Identify all significant genes
significant_genes <- data %>%
filter(
p_value <= p_val_cutoff & abs(log2FC) >= fc_cutoff
) %>%
pull(Gene.names)
# Map colours: red for genes of interest, grey otherwise
keyvals.colour <- ifelse(data$Gene.names %in% goi, '#920000',
ifelse(data$Gene.names %in% cntrls, '#0000FF',
ifelse(data$Gene.names %in% significant_genes, '#09622A', 'grey')
)
)
# Identify all significant genes
significant_genes <- data %>%
filter(
p_value <= p_val_cutoff & abs(log2FC) >= fc_cutoff
) %>%
pull(Gene.names)
# Map colours: red for genes of interest, grey otherwise
keyvals.colour <- ifelse(data$Gene.names %in% goi_cellulo, '#920000',
ifelse(data$Gene.names %in% goi_vitro, '#920000',
ifelse(data$Gene.names %in% interactors, '#FF7F00',
ifelse(data$Gene.names %in% cntrls, '#0000FF',
ifelse(data$Gene.names %in% significant_genes, '#09622A', 'grey')
)
)
)
)
# Map colours: red for genes of interest, grey otherwise
keyvals.colour <- ifelse(data$Gene.names %in% goi_cellulo, '#920000',
ifelse(data$Gene.names %in% goi_vitro, '#920000',
ifelse(data$Gene.names %in% interactors, '#FF7F00',
ifelse(data$Gene.names %in% cntrls, '#0000FF',
ifelse(data$Gene.names %in% significant_genes, '#09622A', 'grey')
)
)
)
)
names(keyvals.colour) <- ifelse(data$Gene.names %in% goi_cellulo, 'Gene of Interest (Cellulo)',
ifelse(data$Gene.names %in% goi_vitro, 'Gene of Interest (Vitro)',
ifelse(data$Gene.names %in% interactors, 'Known Interactor',
ifelse(data$Gene.names %in% cntrls, 'Control',
ifelse(data$Gene.names %in% significant_genes, 'Significant Gene', 'Other')
)
)
)
)
# Map sizes: 4 for genes of interest, 1 for others
keyvals.size <- ifelse(
data$Gene.names %in% all_interest, 3, 1.5
)
# Map borders
keyvals.border <- ifelse(
data$Gene.names %in% goi_cellulo, '#E3C849',
ifelse(data$Gene.names %in% goi_vitro, '#B37EBE',
ifelse(data$Gene.names %in% interactors, '#FF7F00',
ifelse(data$Gene.names %in% cntrls, '#0000FF',
ifelse(data$Gene.names %in% significant_genes, '#09622A', 'grey')
)
)
)
)
# Map sizes
keyvals.size <- ifelse(
data$Gene.names %in% all_interest, 3, 1.5
)
# Volcano plot
xmin <- min(data$log2FC, na.rm = TRUE) - 0.5
xmax <- max(data$log2FC, na.rm = TRUE) + 0.5
ymax <- max(-log10(data$p_value), na.rm = TRUE) + 1
vol_plt <- EnhancedVolcano(
data,
lab = ifelse(data$Gene.names %in% all_interest, data$Gene.names, ""),
selectLab = all_interest,
x = 'log2FC',
y = 'p_value',
ylim =  c(0, ymax),
xlim = c(xmin, xmax),
subtitle = "",
pCutoff = p_val_cutoff,
FCcutoff = fc_cutoff,
title = paste0("Differential Protein Abundance: ", cond_1, " vs ", cond_2),
colCustom = keyvals.colour,
pointSize = keyvals.size,
caption = paste0("total = ", nrow(data), " genes"),
legendPosition = "right",
legendLabSize = 12,
drawConnectors = TRUE,
widthConnectors = 0.45,
colConnectors = 'black',
arrowheads = FALSE,
)
# Label the sides of the plot
vol_plt <- vol_plt +
annotate(
geom = "text",
x = c(xmin + 0.2, xmax - 0.2),
y = ymax - 0.5,
label = c(cond_2, cond_1),
size = 8,
fontface = "bold",
color = c("#A4365E", "#4A3D8D"),
) +
theme(
plot.title = element_text(hjust = 0.5, size = 20, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 16)
)
# Save as pdf
ggsave(
filename = paste(cond_1, cond_2, "volcano_plot.pdf", sep = "_"),
plot = vol_plt,
device = "pdf",
width = 12,
height = 8,
dpi = 300
)
source("D:/projects/Other/MS_volcano_plt/MS_volcano_plt.R", echo = TRUE)
source("D:/projects/Other/MS_volcano_plt/MS_volcano_plt.R", echo = TRUE)
library(EnhancedVolcano)
library(dplyr)
library(tidyr)
library(tools)
library(readr)
# Set the data file name
data_name <- "SummaryData_Volcanoplot__CBX1.T_vs_NLS.T_noRibosome.txt"
# The analysis will look at the fold change of cond_1 over cond_2 (log2(cond_1/cond_2))
cond_1 <- "CBX1"
cond_2 <- "NLS"
# Define the genes of interest
goi_cellulo <- c(
"PRDM2", "ZNF584", "C5orf24", "SP140L", "SCMH1", "CBX4"
)
goi_vitro <- c(
"ZNF384", "TEAD3", "ZNF219", "SMARCAL1", "PRDM10"
)
# Define the controls
cntrls <- c("POGZ", "MPHOSPH8", "ZNF644", "CBX1")
source("D:/projects/Other/MS_volcano_plt/MS_volcano_plt.R", echo = TRUE)
# Define the known interactors
interactors <- c(
"MIS12", "TRIM28", "EHMT2", "SETDB1", "ADNP2", "LBR"
)
# Set the pvalue cutoff
p_val_cutoff <- 0.05
# Set the log 2 fold change cutoff
fc_cutoff <- 2.5
#######################################################################################
### CAN IGNORE THE REST
#######################################################################################
# Set the working directory to the location of this script
this_file <- normalizePath(sys.frame(1)$file)
source("D:/projects/Other/MS_volcano_plt/MS_volcano_plt.R", echo = TRUE)
source("D:/projects/Other/MS_volcano_plt/MS_volcano_plt.R", echo = TRUE)
source("D:/projects/Other/MS_volcano_plt/MS_volcano_plt.R", echo = TRUE)
source("D:/projects/Other/MS_volcano_plt/MS_volcano_plt.R", echo = TRUE)
source("D:/projects/Other/MS_volcano_plt/MS_volcano_plt.R", echo = TRUE)
source("D:/projects/Other/MS_volcano_plt/MS_volcano_plt.R", echo = TRUE)
